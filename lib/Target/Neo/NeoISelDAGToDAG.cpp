//===-- SparcISelDAGToDAG.cpp - A dag to dag inst selector for Sparc ------===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the SPARC target.
//
//===----------------------------------------------------------------------===//

#include "NeoTargetMachine.h"
#include "llvm/CodeGen/MachineRegisterInfo.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/IR/Intrinsics.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/ErrorHandling.h"
#include "llvm/Support/raw_ostream.h"
using namespace llvm;

//===----------------------------------------------------------------------===//
// Instruction Selector Implementation
//===----------------------------------------------------------------------===//

//===--------------------------------------------------------------------===//
/// SparcDAGToDAGISel - SPARC specific code to select SPARC machine
/// instructions for SelectionDAG operations.
///
namespace {
class NeoDAGToDAGISel : public SelectionDAGISel {
  /// Subtarget - Keep a pointer to the Sparc Subtarget around so that we can
  /// make the right decision when generating code for different targets.
  const NeoSubtarget *Subtarget;
public:
  explicit NeoDAGToDAGISel(NeoTargetMachine &tm) : SelectionDAGISel(tm) {}

  bool runOnMachineFunction(MachineFunction &MF) override
  {
    Subtarget = &MF.getSubtarget<NeoSubtarget>();
    return SelectionDAGISel::runOnMachineFunction(MF);
  }

  StringRef getPassName() const override {
    return "NEO DAG->DAG Pattern Instruction Selection";
  }
    /// Main hook for targets to transform nodes into machine nodes.
  virtual void Select(SDNode *N) {} ;

  // Include the pieces autogenerated from the target description.
// #include "NeoGenDAGISel.inc"


};
}  // end anonymous namespace

/// createSparcISelDag - This pass converts a legalized DAG into a
/// SPARC-specific DAG, ready for instruction scheduling.
///
FunctionPass *llvm::createNeoISelDag(NeoTargetMachine &TM) {
  return new NeoDAGToDAGISel(TM);
}
